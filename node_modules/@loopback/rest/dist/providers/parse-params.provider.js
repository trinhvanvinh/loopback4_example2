"use strict";
// Copyright IBM Corp. 2018,2020. All Rights Reserved.
// Node module: @loopback/rest
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseParamsMiddlewareProvider = exports.ParseParamsProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const express_1 = require("@loopback/express");
const debug_1 = tslib_1.__importDefault(require("debug"));
const body_parsers_1 = require("../body-parsers");
const keys_1 = require("../keys");
const parser_1 = require("../parser");
const sequence_1 = require("../sequence");
const ajv_factory_provider_1 = require("../validation/ajv-factory.provider");
const debug = debug_1.default('loopback:rest:parse-param');
/**
 * Provides the function for parsing args in requests at runtime.
 *
 * @returns The handler function that will parse request args.
 */
let ParseParamsProvider = class ParseParamsProvider {
    constructor(requestBodyParser, validationOptions = ajv_factory_provider_1.DEFAULT_AJV_VALIDATION_OPTIONS, ajvFactory) {
        this.requestBodyParser = requestBodyParser;
        this.validationOptions = validationOptions;
        this.ajvFactory = ajvFactory;
    }
    value() {
        return (request, route) => parser_1.parseOperationArgs(request, route, this.requestBodyParser, {
            ajvFactory: this.ajvFactory,
            ...this.validationOptions,
        });
    }
};
ParseParamsProvider = tslib_1.__decorate([
    tslib_1.__param(0, core_1.inject(keys_1.RestBindings.REQUEST_BODY_PARSER)),
    tslib_1.__param(1, core_1.inject(keys_1.RestBindings.REQUEST_BODY_PARSER_OPTIONS.deepProperty('validation'), { optional: true })),
    tslib_1.__param(2, core_1.inject(keys_1.RestBindings.AJV_FACTORY, { optional: true })),
    tslib_1.__metadata("design:paramtypes", [body_parsers_1.RequestBodyParser, Object, Function])
], ParseParamsProvider);
exports.ParseParamsProvider = ParseParamsProvider;
let ParseParamsMiddlewareProvider = class ParseParamsMiddlewareProvider {
    constructor(parseParams) {
        this.parseParams = parseParams;
    }
    value() {
        return async (ctx, next) => {
            const route = await ctx.get(keys_1.RestBindings.Operation.ROUTE);
            debug('Parsing parameters for %s %s', route.verb, route.path);
            const params = await this.parseParams(ctx.request, route);
            ctx.bind(keys_1.RestBindings.Operation.PARAMS).to(params);
            debug('Parameters', params);
            return next();
        };
    }
};
ParseParamsMiddlewareProvider = tslib_1.__decorate([
    core_1.bind(express_1.asMiddleware({
        group: sequence_1.RestMiddlewareGroups.PARSE_PARAMS,
        upstreamGroups: sequence_1.RestMiddlewareGroups.FIND_ROUTE,
        chain: keys_1.RestTags.REST_MIDDLEWARE_CHAIN,
    })),
    tslib_1.__param(0, core_1.inject(keys_1.RestBindings.SequenceActions.PARSE_PARAMS)),
    tslib_1.__metadata("design:paramtypes", [Function])
], ParseParamsMiddlewareProvider);
exports.ParseParamsMiddlewareProvider = ParseParamsMiddlewareProvider;
//# sourceMappingURL=parse-params.provider.js.map